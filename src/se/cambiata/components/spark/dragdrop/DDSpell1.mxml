<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="320" height="140"
		 creationComplete="init(event)" xmlns:aaronhardy="com.aaronhardy.*"
		 click="{tiAnswer.setFocus()}"
		 >
	<fx:Script>
		<![CDATA[
			import com.aaronhardy.ProgressBarSkin;
			
			import mx.effects.Tween;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			
			import se.cambiata.utils.string.StringUtils;
			
			import spark.effects.Animate;
			import spark.effects.animation.Animation;
			import spark.effects.animation.MotionPath;
			import spark.effects.animation.SimpleMotionPath;
			import spark.events.TextOperationEvent;

			protected function init(event:FlexEvent):void
			{
				this.delayTimer = new Timer(this.correctionDelayMs);
				this.delayTimer.addEventListener(TimerEvent.TIMER, onTimer);
				this.setValidColor(0);
			}

			
			private var _imgSource:String = '';

			[Bindable]
			public function get imgSource():String
			{
				return _imgSource;
			}

			public function set imgSource(value:String):void
			{
				_imgSource = value;
			}
			
			
			
			private var _correctTag:String = 'abc';
			
			[Bindable]
			public function get correctTag():String
			{
				return _correctTag;
			}

			public function set correctTag(value:String):void
			{
				_correctTag = value;
			}

			
			private var _correctionDelayMs:int = 1000; 

			public function get correctionDelayMs():int
			{
				return _correctionDelayMs;
			}

			
			public function set correctionDelayMs(value:int):void
			{
				_correctionDelayMs = value;
				this.delayTimer.delay = value;
			}
			

			protected function onAnswerChange(event:TextOperationEvent):void
			{
				this.delayTimer.stop();
				this.delayTimer.start();
			}
			
			private var delayTimer:Timer; 

			
			private var _displayWrongChars:Boolean = true;

			[Bindable]
			public function get displayWrongChars():Boolean
			{
				return _displayWrongChars;
			}

			public function set displayWrongChars(value:Boolean):void
			{
				_displayWrongChars = value;
			}
			
			private var _useWrongCharsMask:Boolean = true;
			
			public function get useWrongCharsMask():Boolean
			{
			
				return _useWrongCharsMask;
			}

			public function set useWrongCharsMask(value:Boolean):void
			{				
				_useWrongCharsMask = value;
			}
			
			private var _caseSensitive:Boolean = false;

			public function get caseSensitive():Boolean
			{
				return _caseSensitive;
			}

			public function set caseSensitive(value:Boolean):void
			{
				_caseSensitive = value;
			}
			
			
			
			[Bindable]
			private var wrongChars:String = '';
			
			private function setWrongChars(charsArray:Array): void {
				
				trace('--------------');
				trace(charsArray, charsArray.length);
				var charMask:String = '';
				if (this.useWrongCharsMask) charMask = '*';
				
				if (charMask != '' && charsArray.length) {
					for (var i:int = 0; i < charsArray.length; i++) {
						charsArray[i] = charMask;
					}
				}
				trace(charsArray, charsArray.length);
				this.wrongChars = charsArray.join('');
			}

			//----------------------------------------------------------------------------------
			
			static public  function calcResult(strAnswer:String, strCorrect:String, caseSensitive:Boolean=false) : Object {
				
				trace('==============================');
				trace('calcResult', strAnswer, strCorrect);
				
				var arrCorrect:Array = strCorrect.split('|');
				var result:Number = 0;
				
				var bestIndex:int = 0;
				
				for (var i:int = 0; i < arrCorrect.length; i++) {
					var tempResult:Number = StringUtils.stringCompare(strAnswer, arrCorrect[i], '%', caseSensitive);
					trace(arrCorrect[i], tempResult);					
					if (tempResult > result) {
						result = tempResult;
						bestIndex = i;
					}					
				}
				
				trace('best:', arrCorrect[bestIndex], bestIndex, result);

				return {result: result, bestIndex: bestIndex, bestAnswer:arrCorrect[bestIndex]};
			}
			
			private function onTimer(e:TimerEvent = null): void {
				var resultObject:Object = calcResult(tiAnswer.text, this.correctTag, this.caseSensitive);
				trace(ObjectUtil.toString(resultObject));
				var result:Number = resultObject.result;
				trace('check difference', resultObject.bestAnswer);
				//var difference:Array = StringUtils.stringDifference(tiAnswer.text, this.correctTag, false);
				var difference:Array = StringUtils.stringDifference(tiAnswer.text, resultObject.bestAnswer, false, this.caseSensitive);
				this.setWrongChars(difference);
				
				this.result = result;
				
				this.dispatchEvent(new ProgressEvent(ProgressEvent.PROGRESS, false, false, result, 1));
				
				//this.progress.value = result;				
				this.delayTimer.stop();
			
				var ani:Animate = new Animate(this.progress);
				ani.duration = 500;
				var motionPath:SimpleMotionPath = new SimpleMotionPath('value', this.progress.value, result);
				ani.motionPaths = new Vector.<MotionPath>;
				ani.motionPaths.push(motionPath);
				ani.play();
				
				this.setValidColor(this.result);
				
				
			}
			
			
			private var _result:Number = 0;
			
			[Bindable]
			public function get result(): Number {
				return this._result;
			}
			
			public function set result(value:Number): void {
				this._result = value;
			}
			
			private var _validColor:uint = 0xFF0000;

			[Bindable]
			public function get validColor():uint
			{
				return _validColor;
			}

			public function set validColor(value:uint):void
			{
				_validColor = value;
			}
			
			private function setValidColor(result:Number): void {
				trace('setValidColor', result);
				
				switch(result) {
					case 0: this.validColor = 0xAAAAAA; break;
					
					case 1: this.validColor = 0x00DD0; break;
						
					default: {
						if (result > .8) {
							this.validColor = 0xFF8800;
						} else {
							this.validColor = 0x4444FF;	
						}
						
						
					}
				}
			}
			
			
			public function clean(): void {
				this.tiAnswer.text = '';
				this.onTimer();
			}

		]]>
		
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
		<mx:NumberFormatter id="numFormat" precision="0"  />
		
	</fx:Declarations>
	
	
	
	<s:Rect width="100%" height="100%" >
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xEEEEEE" />
				<s:GradientEntry color="0xCCCCCC" />
			</s:LinearGradient>			
		</s:fill>
	</s:Rect>

	<s:Rect width="100%" height="100%" visible="false">
		<s:stroke>
			<s:SolidColorStroke color="{this.validColor}" weight="2" />
		</s:stroke>
	</s:Rect>
	
	
	<mx:Image top="8" left="8" width="120" height="120" source="{this.imgSource}" click="{tiAnswer.setFocus()}"/>	
	
	<s:TextInput fontSize="16" id="tiAnswer" right="8" top="8" change="onAnswerChange(event)" width="160"/>
	
	<aaronhardy:ProgressBar id="progress" right="8" top="40" maximum="1" width="160" skinClass="com.aaronhardy.ProgressBarSkin" />
	
	<s:Label right="88" width="80" top="60" text="{this.numFormat.format(this.result * 100)}%" visible="true"/>

	<s:Label id="lblWrongChars" fontSize="24" fontWeight="bold" color="0xCC0000" right="8" top="60" text="{this.wrongChars}" visible="{this.displayWrongChars}"/>
	
	
	
	
</s:Group>

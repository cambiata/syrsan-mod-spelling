<?xml version="1.0" encoding="utf-8"?>
<dragdrop:DragDropBase xmlns:fx="http://ns.adobe.com/mxml/2009"
		
					   xmlns:dragdrop="se.cambiata.components.spark.dragdrop.*" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="140"
		 height="140"
		 dragEnter="onDragEnter(event);"
		 dragDrop="onDragDrop(event);"
		 dragExit="onDragExit(event)"
		 dragComplete="onDragComplete(event)"
		 creationComplete="init(event)"
		 horizontalCenter="0"
		 verticalCenter="0"
		 
		 >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import mx.core.IUIComponent;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			
			import se.cambiata.components.spark.dragdrop.event.DragDropEvent;
			
			import spark.components.supportClasses.GroupBase;
			import spark.events.ElementExistenceEvent;

			
			private var _emptyTag:String = '-';

			public function get emptyTag():String
			{
				return _emptyTag;
			}

			public function set emptyTag(value:String):void
			{
				_emptyTag = value;
			}
			
			
 			private var _tag:String = null;
			
			override public function get tag():String
			{
				return (this._tag) ? this._tag : this._emptyTag;
			}
			
			
			override public function set tag(value:String):void
			{
				this._tag = value;
			}	
			
			
			private function onDragEnter(e:DragEvent):void 
			{
				var numChildren:int = UIComponent(e.currentTarget).numChildren;
				if (numChildren == 0) {
					DragManager.acceptDragDrop(e.currentTarget as IUIComponent);
				}
			}

			private function onDragDrop(e:DragEvent):void {

				var numChildren:int = UIComponent(e.currentTarget).numChildren;

				if (numChildren == 0) {
					var dragInitiator:UIComponent = UIComponent(e.dragInitiator);

					if (dragInitiator is DragDropItem) {
						var dragItem:DragDropItem = DragDropItem(dragInitiator);
						e.currentTarget.addElement(dragItem);
						
					} else {
						e.currentTarget.addElement(dragInitiator);
					}
					dragInitiator.horizontalCenter = 0;
					dragInitiator.verticalCenter = 0;

				}
			}

			protected function onDragExit(event:DragEvent):void
			{
				// TODO Auto-generated method stub
				trace('onDragExit');
			}


			protected function onDragComplete(event:DragEvent):void
			{
				// TODO Auto-generated method stub
				trace('onDragComplete');
			}


			protected function init(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				this.addEventListener(ElementExistenceEvent.ELEMENT_ADD, onElementAdd);
				this.addEventListener(ElementExistenceEvent.ELEMENT_REMOVE, onElementRemove);
			}
			
			
			private function onElementAdd(e:ElementExistenceEvent): void {
				trace('onElementAdd',  this.numChildren);
				this.tag = DragDropBase(this.getChildAt(0)).tag;
				this.dispatchEvent(new Event(Event.CHANGE));
			}
			
			private function onElementRemove(e:ElementExistenceEvent): void {
				trace('onElementRemove', this.numChildren);
				this.tag = this._emptyTag;
				this.dispatchEvent(new Event(Event.CHANGE));
			}			

		]]>
	</fx:Script>

	<s:Ellipse width="100%"
			   height="100%"
			   horizontalCenter="0"
			   verticalCenter="0">
		<s:fill>
			<mx:SolidColor color="#DDDDDD"/>
		</s:fill>
	</s:Ellipse>


</dragdrop:DragDropBase>

<?xml version="1.0" encoding="utf-8"?>
<dragdrop:DDBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:dragdrop="se.cambiata.components.spark.dragdrop.*" width="120" height="120"
				 dragEnter="onDragEnter(event)"
				 dragDrop="onDragDrop(event)"
				 dragExit="onDragExit(event)"
				 dragComplete="onDragComplete(event)"
				 creationComplete="init(event)"
				 horizontalCenter="0"
				 verticalCenter="0"				 
				 
				 
				 >
	<fx:Script>
		<![CDATA[
			import mx.core.IUIComponent;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.StateChangeEvent;
			import mx.managers.DragManager;
			
			import spark.events.ElementExistenceEvent;

			protected function onDragEnter(e:DragEvent):void
			{
				trace('onDragEnter');
				var dragInitiator:UIComponent = UIComponent(e.dragInitiator);
				if (dragInitiator is DDItem) {
					var numChildren:int = DDTarget(e.currentTarget).numChildren;
					trace(numChildren);
					if (numChildren == 0) {
						DragManager.acceptDragDrop(e.currentTarget as IUIComponent);
					}					
				} 				
			}

			protected function onDragDrop(e:DragEvent):void
			{
				var dragInitiator:UIComponent = UIComponent(e.dragInitiator);
				if (dragInitiator is DDItem) {
					var numChildren:int = UIComponent(e.currentTarget).numChildren;
					if (numChildren == 0) {
						var ddItem:DDItem = DDItem(dragInitiator);
						ddItem.horizontalCenter = 0;
						ddItem.verticalCenter = 0;						
						e.currentTarget.addElement(ddItem);
					}
				}
			}


			protected function onDragExit(event:DragEvent):void
			{
				// TODO Auto-generated method stub
			}


			protected function onDragComplete(event:DragEvent):void
			{
				// TODO Auto-generated method stub
			}


			protected function init(event:FlexEvent):void
			{
				this.addEventListener(ElementExistenceEvent.ELEMENT_ADD, onElementAdd);
				this.addEventListener(ElementExistenceEvent.ELEMENT_REMOVE, onElementRemove);			
			}
			
			private function onElementAdd(e:ElementExistenceEvent): void {
				
				trace('onElementAdd',  this.numChildren);
				this.tag = DDItem(this.getChildAt(0)).tag;
				this.dispatchEvent(new Event(Event.CHANGE, true));
			}
			
			private function onElementRemove(e:ElementExistenceEvent): void {
				trace('onElementRemove', this.numChildren);
				this.tag = this._emptyTag;
				this.dispatchEvent(new Event(Event.CHANGE, true));
			}				

			private var _emptyTag:String = '-';
			
			public function get emptyTag():String
			{
				return _emptyTag;
			}
			
			public function set emptyTag(value:String):void
			{
				_emptyTag = value;
			}			
			
			private var _tag:String = '-';
			
			[Bindable]
			public function get tag():String
			{
				return _tag;
			}
			public function set tag(value:String):void
			{
				_tag = value;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:Ellipse width="100%" height="100%" >
		<s:fill>
			<s:SolidColor color.default="0xDDDDDD" color.correct="0x88FF88" color.wrong="0xFF8888"/>
<!--			<s:SolidColor color="0xDDDDDD"/>-->
		</s:fill>
	</s:Ellipse>
		
	
	<dragdrop:states>
		<s:State name="default" />
		<s:State name="wrong" />
		<s:State name="correct" />
	</dragdrop:states>	
	
	
</dragdrop:DDBase>
